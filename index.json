[{"authors":["admin"],"categories":null,"content":"Zewen YE is currently working as a PhD student of Intelligent Security and Ubiquitous Computing Lab\r(ISUC), Zhejiang University\r(ZJU). He obtained his bachelor’s degree of Electronic Engineering at the College of Information Science \u0026amp; Electronic Engineering\r(ISEE), Zhejiang University\r(ZJU) in 2020.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"http://lucas-wye.github.io/author/zw-ye/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/zw-ye/","section":"authors","summary":"Zewen YE is currently working as a PhD student of Intelligent Security and Ubiquitous Computing Lab\r(ISUC), Zhejiang University\r(ZJU). He obtained his bachelor’s degree of Electronic Engineering at the College of Information Science \u0026amp; Electronic Engineering\r(ISEE), Zhejiang University\r(ZJU) in 2020.","tags":null,"title":"ZW YE","type":"authors"},{"authors":[],"categories":[],"content":" A computer network is a digital telecommunications network which allows nodes to share resources. In computer networks, computing devices exchange data with each other using connections (data links) between nodes.  Commands ping domainname\rhostname\rcat /etc/hosts # ip address\rsudo systemctl restart NetworkManager # hosts生效\rcat /etc/resolv.conf # dns server\rip # TCP/IP interface configuration and routing utility\rifconfig # configure a network interface\rroute # show / manipulate the IP routing table\rnetstat # show network status (network connections, routing tables, interface statistics, masquerade connections, and multicast memberships)\rsudo ping ip地址 -i 0.01 -s 65500 # 每0.01秒给ip地址对应的机器发送65500字节的数据包\r Useful Remote Connection Utilities • ftp [options] host, transfer file(s) using file transfer protocol\n• telnet [host [port]], communicate with host using telnet protocol\n• ssh, remote login or remote execution using secure shell\n• rcp/scp, remotely copy files from this machine to another machine\n• rsync, smartly copy files over network after checking contents\n• curl, transfer a URL via HTTP, FTP, IMAP, etc\n• wget, download files over the Internet via HTTP or FTP\n• lynx/links, text-mode (mini) web browser\naria2 (1)Install\n# Ubuntu\rsudo apt-get install aria2\r# CentOS\ryum install aria2\r (2)Usage\n# 在命令后附加地址即可\raria2c \u0026quot;url\u0026quot;\r# 分段下载，利用 aria2 的分段下载功能可以加快文件的下载速度\r# 使用 2 个连接来下载该文件，s的参数值介于 1~5 之间\raria2c -s 2 \u0026quot;url\u0026quot; # 断点续传，在命令中使用 c 选项可以断点续传文件\raria2c -c \u0026quot;url\u0026quot;  ssh # 安装 SSH(Secure Shell) 服务以提供远程管理服务\rsudo apt install openssh-server\r# 启动ssh服务\r/etc/init.d/ssh start\rsudo service ssh start\r# 检测是否已启动\rps -e | grep ssh\r## SSH远程登录\rssh username@IP_ADDR\r# 将文件/文件夹从远程机下载到本地(scp) scp -r username@IP_ADDR:/home/username/remotefile.txt .\r# 设置公钥登录\r# (1)复制本地的公钥\rcat ~/.ssh/id_rsa.pub\r# (2)在远程机器上写入复制的公钥\rvim ~/.ssh/authorized_keys\rchmod 600 ~/.ssh/authorized_keys\r# (3)远程机器授权公钥登录\rsudo echo \u0026quot;PubkeyAuthentication yes\u0026quot; \u0026gt;\u0026gt; /etc/ssh/sshd_config\r# (4)重启ssh服务\rsudo systemctl restart sshd.service\r# .ssh/config example\rHost {HOSTNAME}\rHostName {IP}\rUser {Username}\rssh HOSTNAME\r# SSH for data transfer\rssh -qTfnN -D PORT SERVER  curl  client URL tool  (1)不带有任何参数时，发出 GET 请求\ncurl https://www.example.com\r (2)-A指定User-Agent，默认用户代理字符串是curl/[version]\ncurl -A 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36' https://google.com\r (3)-b 参数用来向服务器发送 Cookie\n# 生成一个标头Cookie: foo=bar，向服务器发送一个名为foo、值为bar的 Cookie\rcurl -b 'foo=bar' https://google.com\r (4)-d 参数用于发送 POST 请求的数据体\ncurl -d'login=emma＆password=123'-X POST https://google.com/login\r# `--data-urlencode` 等同于 `-d` # 发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码\r (5)-G 参数用来构造 URL 的查询字符串\n# 实际请求的 URL 为https://google.com/search?q=kitties\u0026amp;count=20\rcurl -G -d 'q=kitties' -d 'count=20' https://google.com/search\r (6)-H 参数添加 HTTP 请求的标头\ncurl -H 'Accept-Language: en-US' https://google.com\rcurl -d '{\u0026quot;login\u0026quot;: \u0026quot;emma\u0026quot;, \u0026quot;pass\u0026quot;: \u0026quot;123\u0026quot;}' -H 'Content-Type: application/json' https://google.com/login\r (7) -i 参数打印出服务器回应的 HTTP 标头\n# 先输出服务器回应的标头，然后空一行，再输出网页的源码\rcurl -i https://www.example.com\r (8)-o 参数将服务器的回应保存成文件，等同于wget命令\ncurl -o example.html https://www.example.com\r# `-O` 参数将服务器回应保存成文件，并将 URL 的最后部分当作文件名。\rcurl -O https://www.example.com/foo/bar.html\r# 通过添加 `-C` 继续对该文件进行下载，已经下载过的文件不会被重新下载\rcurl -C -O http://www.gnu.org/software/gettext/manual/gettext.html\r terminal设置代理 # MacOS \u0026amp; Linux\rexport http_proxy=http://127.0.0.1:PORT\rexport https_proxy=http://127.0.0.1:PORT\r# Windows\rset https_proxy=\u0026quot;http://127.0.0.1:PORT\u0026quot;\rset http_proxy=\u0026quot;http://127.0.0.1:PORT\u0026quot;\r Windows VPN连接 rasdial VPN_NAME USERNAME PASSWORD\r More \rnmcli用法\n","date":1590807003,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1590807003,"objectID":"29a43482b00560917ae50cb1e063ac48","permalink":"http://lucas-wye.github.io/post/cli_net_work/","publishdate":"2020-05-30T10:50:03+08:00","relpermalink":"/post/cli_net_work/","section":"post","summary":"A computer network is a digital telecommunications network which allows nodes to share resources. In computer networks, computing devices exchange data with each other using connections (data links) between nodes.","tags":[],"title":"Network","type":"post"},{"authors":[],"categories":[],"content":" Search engines are systems that enable users to search for documents on the World Wide Web. Popular examples include Yahoo!Search, Bing, Google, and Ask.com.  特殊符号 双引号：把搜索词放在双引号中，代表完全匹配搜索（顺序也必须完全匹配）\neg: \u0026ldquo;浙江大学SCDA\u0026rdquo;\n减号：搜索不包含减号后面的词的页面，使用这个指令时减号前面必须是空格，减号后面没有空格，紧跟着需要排除的词\neg: 浙江大学 -学院\n星号：通配符\neg: 浙*大学\ninurl：查找网址中包含指定字符的页面\neg: inurl:nice\ninanchor：查找导入链接锚文字中包含搜索词的页面\neg: inanchor:点击这里\nintitle: 查找页面title 中包含关键词的页面\neg: intitle: 查老师\nfiletype：查找特定格式文件\neg: filetype:pdf SCDA\nsite: 搜索某个域名下的所有子路径\neg: site: www.zju.edu.cn\n快照功能 搜索引擎在收录网页时，对网页进行备份，存在自己的服务器缓存里，由于网页快照是存储在搜索引擎服务器中，所以查看网页快照的速度往往比直接访问网页要快\neg: 高斯分布 site:zh.wikipedia.org\n特殊搜索  中文文献\n百度学术\nbing学术\n谷歌学术 英文文献\nbing学术\n谷歌学术\nSci-hub\nIEEE 编程相关\ngithub\nmedium\nstackoverflow  深度搜索 特殊的搜索工具可以搜索深网的内容\n微信搜索 https://weixin.sogou.com\nArchive搜索引擎 http://archive.org\nWikihow https://zh.wikihow.com/搜索深网\nmore https://www.freebuf.com/news/137844.html\nMore \rsearch.pdf\n搜索引擎有哪些常用技巧\n深网搜索引擎\n","date":1588738517,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588738517,"objectID":"a64273c0aafeee22766b03e185da08b4","permalink":"http://lucas-wye.github.io/post/howtosearch/","publishdate":"2020-05-06T12:15:17+08:00","relpermalink":"/post/howtosearch/","section":"post","summary":"Search engines are systems that enable users to search for documents on the World Wide Web","tags":[],"title":"How to use search engine","type":"post"},{"authors":[],"categories":[],"content":"\rClick here\n","date":1588738358,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588738358,"objectID":"e76f3cffcc15d29880a7c0f15c126b0b","permalink":"http://lucas-wye.github.io/post/matlab/","publishdate":"2020-05-06T12:12:38+08:00","relpermalink":"/post/matlab/","section":"post","summary":"MATLAB ® combines a desktop environment tuned for iterative analysis and design processes with a programming language that expresses matrix and array mathematics directly","tags":[],"title":"Matlab","type":"post"},{"authors":[],"categories":[],"content":"\rClick here\n","date":1587975374,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587975374,"objectID":"d67d50e909ee90eaa4af6af3badd74b8","permalink":"http://lucas-wye.github.io/post/ask/","publishdate":"2020-04-27T16:16:14+08:00","relpermalink":"/post/ask/","section":"post","summary":"Click here","tags":[],"title":"How to Ask Question","type":"post"},{"authors":[],"categories":[],"content":" LaTeX（音译“拉泰赫”）是一种基于ΤΕΧ的排版系统，由美国计算机学家莱斯利·兰伯特（Leslie Lamport）在20世纪80年代初期开发。 利用这种格式，即使使用者没有排版和程序设计的知识也可以充分发挥由TeX所提供的强大功能，能在几天，甚至几小时内生成很多具有书籍质量的印刷品。 对于生成复杂表格和数学公式，这一点表现得尤为突出。因此它非常适用于生成高印刷质量的科技和数学类文档。这个系统同样适用于生成从简单的信件到完整书籍的所有其他种类的文档。  Install 从\r清华镜像源下载对应操作系统的Texlive软件包\n# 安装\rsudo ./install-tl # 设置环境变量\r# LaTeX\rexport TEX_HOME=/usr/local/texlive/2019\rexport PATH=$PATH:$TEX_HOME/bin/x86_64-linux\rexport INFOPATH=$INFOPATH:$TEX_HOME/texmf-dist/doc/info\rexport MANPATH=$MANPATH:$TEX_HOME/texmf-dist/doc/man\r 安装 Windows 字体 # 创建 win 下字体专用文件夹\rsudo mkdir /usr/share/fonts/winfonts\r# 复制windows上的字体到/usr\rsudo cp your_winfonts_dir /usr/share/fonts/winfonts # 进入字体文件夹\rcd /usr/share/fonts/winfonts\r# 修改访问权限\rsudo chmod 744 *\r# 回到主目录\rcd ~\r# 更新字体信息\rsudo mkfontscale\rsudo mkfontdir\rsudo fc-cache -f -v\r More \rLaTeX模板\nLaTeX开源小屋\nTeX Live下载及安装说明 一份其实很短的 LaTeX 入门文档\n","date":1587975168,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587975168,"objectID":"75b881dcb33092e405db4b74fe9a32a0","permalink":"http://lucas-wye.github.io/post/latex/","publishdate":"2020-04-27T16:12:48+08:00","relpermalink":"/post/latex/","section":"post","summary":"LaTeX（音译“拉泰赫”）是一种基于ΤΕΧ的排版系统","tags":[],"title":"LaTeX","type":"post"},{"authors":[],"categories":[],"content":" Go 是一个开源的编程语言，它能让构造简单、可靠且高效的软件变得容易。 Go是从2007年末由Robert Griesemer, Rob Pike, Ken Thompson主持开发，后来还加入了Ian Lance Taylor, Russ Cox等人，并最终于2009年11月开源，在2012年早些时候发布了Go 1稳定版本。 现在Go的开发已经是完全开放的，并且拥有一个活跃的社区。  Install 从\r官网下载对应平台的编译器\n设置国内代理 go env -w GOPROXY=https://goproxy.cn, direct\r 设置环境变量 # Golang\rexport GO=... # 安装位置\rexport PATH=$PATH:$GO/bin\rexport GOPATH=... # 指定一个本地位置\rexport PATH=$PATH:$GOPATH/bin\r More \rgo教程\ngo web教程\n","date":1587974907,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587974907,"objectID":"60564cfd3a9dbb4c59db353cf32079be","permalink":"http://lucas-wye.github.io/post/golang/","publishdate":"2020-04-27T16:08:27+08:00","relpermalink":"/post/golang/","section":"post","summary":"Go 是一个开源的编程语言，它能让构造简单、可靠且高效的软件变得容易","tags":[],"title":"Golang","type":"post"},{"authors":[],"categories":[],"content":" Python 是一种解释型、面向对象、动态数据类型的高级程序设计语言。 Python 由 Guido van Rossum 于 1989 年底发明，第一个公开发行版发行于 1991 年。 像 Perl 语言一样, Python 源代码同样遵循 GPL(GNU General Public License) 协议。  Install 从\r清华镜像源下载对应平台的 anaconda/miniconda 安装即可。\nconda创建python虚拟环境 # 查看当前存在哪些虚拟环境 conda env list\r## or\rconda info -e # 创建虚拟环境\rconda create -n your_env_name python=X.X # 版本选择：2.7、3.6等\r# 激活环境\rconda activate your_env_name\r# 关闭虚拟环境\rconda deactivate\r# 安装package到your_env_name\rconda install -n your_env_name package_name\r# 删除环境中的某个包\rconda remove --name your_env_name package_name\r# 删除虚拟环境\rconda remove -n your_env_name --all\r 常用包安装方法 # tensorflow\rconda install tensorflow\r# pytorch(CPU)\rconda install pytorch torchvision cpuonly -c pytorch\r conda导出环境依赖 conda list -e \u0026gt; requirements.txt\r Jupyter notebook 访问远程服务器的notebook配置：\n# 生成一个 notebook 配置文件\rjupyter notebook --generate-config\r# 生成密码\rjupyter notebook password\r 修改配置文件 ~/.jupyter/jupyter_notebook_config.py\nc.NotebookApp.ip = '*' # 允许任何IP访问\rc.NotebookApp.password = u'sha:...' # 密码的哈希值\rc.NotebookApp.open_browser = False c.NotebookApp.port = 8888 # 自行指定一个端口\r pip # 导入依赖包 pip install -r requirements.txt # 只导出项目依赖包\rpip install pipreqs\rpipreqs ./\r# 导出依赖包\rpip freeze \u0026gt; requirements.txt\r# 离线下载\rpip download -d [DIR] -r requirements.txt # 离线安装\rpip install --no-index --find-links=[DIR] -r requirements.txt # 更改镜像源\recho \u0026quot;[global]\\nindex-url = http://mirrors.aliyun.com/pypi/simple/\\n[install]\\ntrusted-host = mirrors.aliyun.com\u0026quot; \u0026gt; ~/.pip/pip.conf  More \ripynb文件在线查看工具\n","date":1587974743,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587974743,"objectID":"d220a608a8ad4324bff2f46915504c97","permalink":"http://lucas-wye.github.io/post/python/","publishdate":"2020-04-27T16:05:43+08:00","relpermalink":"/post/python/","section":"post","summary":"Python 是一种解释型、面向对象、动态数据类型的高级程序设计语言","tags":[],"title":"Python","type":"post"},{"authors":[],"categories":[],"content":" Tmux是一个优秀的终端复用软件，类似GNU Screen，但来自于OpenBSD，采用BSD授权 使用它最直观的好处就是，通过一个终端登录远程主机并运行tmux后，在其中可以开启多个控制台而无需再“浪费”多余的终端来连接这台远程主机  Install # Ubuntu\rsudo apt-get install tmux\r# MacOS\rbrew install tmux\r 基本操作 # 新建会话 tmux # 新建一个无名称的会话\rtmux new -s demo # 新建一个名称为demo的会话\r# 进入之前会话\rtmux a # 默认进入第一个会话\rtmux a -t demo # 进入到名称为demo的会话\r# 离开会话\r[CTRL B] d\r# 关闭会话\rtmux kill-session -t demo # 关闭demo会话\rtmux kill-server # 关闭服务器，所有的会话都将关闭\r# 查看会话\rtmux list-session # 查看所有会话\rtmux ls # 查看所有会话，提倡使用简写形式\r# 滚屏/cope mode\r[CTRL B] [ # 设置滚屏vi快捷键\recho \u0026quot;setw -g mode-keys vi\u0026quot; \u0026gt; ~/.tmux.conf\rtmux source-file ~/.tmux.conf\r# copy\r[CTRL B] [ -\u0026gt; [Space] -\u0026gt; Select -\u0026gt; [Enter]\r# paste\r[CTRL B] ]\r# 切换pane\r[CTRL B] Up|Down|Left|Right # 垂直分屏\r[CTRL B] % # 水平分屏\r[CTRL B] \u0026quot;\r More \rTmux使用手册\n","date":1587974655,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587974655,"objectID":"5d04ef8d30433cec4c23569542e473b1","permalink":"http://lucas-wye.github.io/post/tmux/","publishdate":"2020-04-27T16:04:15+08:00","relpermalink":"/post/tmux/","section":"post","summary":"Tmux是一个优秀的终端复用软件，类似GNU Screen，但来自于OpenBSD，采用BSD授权","tags":[],"title":"Tmux","type":"post"},{"authors":[],"categories":[],"content":" Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。 Java可运行于多个平台，如Windows, Mac OS，及其他多种UNIX版本的系统。  Install \rJDK\nIntelliJ IDEA\n# 配置环境变量 export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_144 # 这里换成自己的jdk目录\rexport JRE_HOME=${JAVA_HOME}/jre export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib export PATH=${JAVA_HOME}/bin:$PATH\r Usage of adb(Android Debug) # 卸载系统软件\radb shell\rpm list package\rpm uninstall -k --user 0 package_name\r ","date":1587974354,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587974354,"objectID":"0df67d4cfeb8f6fed55af4235c0f51ed","permalink":"http://lucas-wye.github.io/post/java/","publishdate":"2020-04-27T15:59:14+08:00","relpermalink":"/post/java/","section":"post","summary":"Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言","tags":[],"title":"Java","type":"post"},{"authors":[],"categories":[],"content":" 所有的 Unix Like 系统都会内建 Vi 文书编辑器，其他的文书编辑器则不一定会存在。但是目前我们使用比较多的是 Vim 编辑器。 Vim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。 Vim是从 Vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。简单的来说， Vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。  File Operation          :wq 存盘退出   :q! 退出不保存   :saveas [path/to/file] 另存为 [path/to/file]   :qa! 强行退出所有的正在编辑的文件   :bn 和 :bp 切换下一个或上一个文件   :w !sudo tee % 以sudo保存正在编辑的文件   :n move to next file   :rew 回到第一个文件   :edit [Filename] 打开新文件    Cursor movement          hjkl move   /[PATTERN] 搜索   ?[PATTERN] 搜索   % 匹配括号移动   f 搜索并移动到某个字符前   t 到某个字符前的第一个字符   :N 到第N行   gg 到第一行   G 到最后一行   [n] G go to last line or line [n]   w/W 到下一个单词的开头   e/E 到下一个单词的结尾   b 到上一个单词的开头   0 beginning of current line   $ end of current line   ^ beginning of text on current line   [CTRL] F/B move screen   [CTRL] D/U move half screen    Inserting text          i 前插入   a 后插入   I insert text at beginning of line   A append text at end of line   o 在当前行后插入一个新行   O 在当前行前插入一个新行    Deleting text          d 删除   D 删除当前行光标后所有内容   x 删当前光标的字符   X 删当前光标前的字符    Changing commands          u undo   [CTRL] r redo   . repeat last operation   p 后粘贴   P 前粘贴   y 复制   s/S substitute   ~ change case of character   J join current line and next line    Split windows          :split/vsplit 创建分屏   [CTRL] w + 方向 切换分屏    Command line mode          :![cmd] 暂时退出命令行执行cmd   :set all display all option settings   :[Addr/%]s/old expr/new string/[g] 替换当前行/Addr/%(文件内所有)的old expr为new string,[g]全局替换，否则只替换第一个 ｜   [CTRL] p/n 自动补齐   [CTRL] +/- 改变尺寸   v visual模式   V v-line模式   [CTRL] v v-block模式   :normal [Command] 可视化模式下执行命令   qa 录制宏   ci + \u0026quot; 删除引号之中的内容   tabe 打开新的标签页   +/-tabnext 切换标签页    Regular expression          ? match any single character at the indicated position   * match any string of zero or more characters   [abc\u0026hellip;] match any of the enclosed characters   [a-e] match any characters in the range a,b,c,d,e   [!def] match any characters not one of the enclosed characters, sh/bash   {abc,bcd,cde} match any set of characters separated by comma (,) (no spaces), bash/csh   ~ home directory of the current user, bash/csh   ~ user home directory of the specified user, bash/csh   . match any single character except newline   [^abc] match any character NOT in the enclosed set   ^exp regular expression must start at the beginning of the line   exp$ regular expression must end at the end of the line   \\ treat the next character literally 转义字符   xy*z xy开头，z结尾的字符串    Plug https://github.com/junegunn/vim-plug\n.vimrc \r.vimrc\nNeoVim 使用Vim配置文件\nln -s ~/.vim ~/.config/nvim\rln -s ~/.vimrc ~/.config/nvim/init.vim\r More \rVi/Vim教程\n简明 VIM 练级攻略\n","date":1587972999,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587972999,"objectID":"60a65170037e2fa380c26ec80c791b2c","permalink":"http://lucas-wye.github.io/post/vi_vim/","publishdate":"2020-04-27T15:36:39+08:00","relpermalink":"/post/vi_vim/","section":"post","summary":"所有的 Unix Like 系统都会内建 Vi 文书编辑器","tags":[],"title":"Vi/Vim/NeoVim","type":"post"},{"authors":[],"categories":[],"content":" Kali Linux是基于Debian的Linux发行版， 设计用于数字取证操作系统。由Offensive Security Ltd维护和资助。最先由Offensive Security的Mati Aharoni和Devon Kearns通过重写BackTrack来完成，BackTrack是他们之前写的用于取证的Linux发行版。 Kali Linux预装了许多渗透测试软件，包括nmap 、Wireshark 、John the Ripper，以及Aircrack-ng；用户可通过硬盘、live CD或live USB运行Kali Linux。Kali Linux既有32位和64位的镜像。可用于x86 指令集。同时还有基于ARM架构的镜像，可用于树莓派和三星的ARM Chromebook。  Install # 从Docker安装\rdocker pull kalilinux/kali-linux-docker\r# 运行\rdocker run -t -i kalilinux/kali-linux-docker /bin/bash\r More \rkali官网\n","date":1571212971,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587974571,"objectID":"d29205c5a4f0eb0d24ac800734bf9004","permalink":"http://lucas-wye.github.io/post/kali/","publishdate":"2019-10-16T16:02:51+08:00","relpermalink":"/post/kali/","section":"post","summary":"Kali Linux是基于Debian的Linux发行版， 设计用于数字取证操作系统","tags":[],"title":"Kali","type":"post"},{"authors":[],"categories":[],"content":" Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。  Install # Ubuntu curl -fsSL https://get.docker.com -o get-docker.sh\rsudo sh get-docker.sh\r# 建立docker组\rsudo groupadd docker\r# 将当前用户加入docker组\rsudo usermod -aG docker $USER\r# 卸载本机所有的镜像、容器、卷以及配置文件\rsudo rm -rf /var/lib/docker\r Basic Pull\ndocker pull [user name]/[repo name]:[tag name]\r Run\n -i 以交互模式运行容器，通常与 -t 同时使用 -t 为容器重新分配一个伪输入终端，通常与 -i 同时使用 -v 绑定一个卷，格式为：本机绑定目录:容器内部绑定目录 -d 后台运行容器，并返回容器ID -P 随机端口映射，容器内部端口随机映射到主机的高端口 -p 指定端口映射，格式为：主机(宿主)端口:容器端口 -a 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项 \u0026ndash;name 对所新建容器进行命名 \u0026ndash;rm 容器终止后，自动删除容器文件  Others\n# 列出容器\rdocker container ls -a # 查看容器ID\rdocker ps -a\r# 重新启动已被终止的指定容器\rdocker start [CONTAINER ID]\r# 终止容器\rdocker stop [CONTAINER NAME/ID]\r# 若是利用 -it 在容器内部进行操作，仅需输入 exit 即可\r# 删除容器\rdocker kill [CONTAINER NAME/ID]\r# 将所有容器删除\rdocker container prune\r# 列出镜像\rdocker images\r# 重命名镜像\rdocker tag [old REPOSITORY]:[old TAG] or [IMAGE ID] [new REPOSITORY]:[new TAG]\r# 删除镜像\rdocker rmi [IMAGE]\r# 存出镜像\rdocker save -o [xx.tar] [REPOSITORY]:[TAG]\r# 载入镜像\rsudo docker load --input [镜像文件]\r# 更新镜像\rdocker commit [OPTIONS] [IMAGE ID] [new REPOSITORY]:[new TAG]\r# -m: 提交的描述信息\r# -a: 指定镜像作者\r More \rDocker教程\nDocker学习笔记\n","date":1571212833,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587974433,"objectID":"127726cd63ae2ab246877595df44d1d3","permalink":"http://lucas-wye.github.io/post/docker/","publishdate":"2019-10-16T16:00:33+08:00","relpermalink":"/post/docker/","section":"post","summary":"Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中","tags":[],"title":"Docker","type":"post"},{"authors":[],"categories":[],"content":" GCC编译器也称为Linux GCC命令，它有很多选项。GCC编译器是Linux下最常用的编译器。  Install # MacOS安装Xcode工具链 xcode-select --install\r# Ubuntu\rsudo apt install gcc\r Basic gcc -c filename.c # compile only, produce .o\rgcc -g # compile for debugging\rgcc -o filename.o # gcc -O 1,2,3,4,s,fast # for optimization level\rgcc -Ipathname\rgcc -Dsymbol # define preprocessor symbol\rgcc -Ldirectory # add directory to the library search path\rgcc -lxyz # link with library libxyz.a or libxyz.so\r gdb gdb BINARY_FILE\rlist\rbr 8 # breakpoint in line 8\rrun\rprint value next\rwhere\rhelp\rquit\r make (1)Predefined Macros\n AS - assembler (as) CC - C compiler command (cc) FC - Fortran compiler command (fc) CPP - C++ preprocessing command ($(CC) -E) CXX - C++ compiler command (g++) CFLAGS - C compiler option flags (e.g. -g) FFLAGS - Fortran compiler option flags (e.g. -g) LDFLAGS - Linking option flags (e.g. –L /usr/share/lib) LDLIBS – Linking libraries (e.g. -lm)  (2)Special Internal Macros\n$* # The basename of the current target\r$\u0026lt; # The name of a dependency file, as we see on last page\r$@ # The name of the current target.\r$? # The list of dependencies that are newer than the target.\r More \rmore of gdb\nMakefile example\n","date":1571212627,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587974227,"objectID":"3214588591155ecd68bdbcf4c8f49c35","permalink":"http://lucas-wye.github.io/post/gcc/","publishdate":"2019-10-16T15:57:07+08:00","relpermalink":"/post/gcc/","section":"post","summary":"GCC编译器也称为Linux GCC命令，它有很多选项。GCC编译器是Linux下最常用的编译器","tags":[],"title":"GCC","type":"post"},{"authors":[],"categories":[],"content":" Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。 Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。 Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。  git本地操作 (1)创建空仓库\ngit init\r (2)添加文件\ngit add FILE_NAME\rgit commit -m YOUR_COMMENT\r (3)查看状态\ngit status\r (4)版本回退\n# 上一个版本就是HEAD^，上上一个版本就是HEAD^^，往上100个版本写成HEAD~100\rgit reset --hard HEAD^\r (5)记录\ngit log # 当前分支\rgit reflog # 所有分支信息\r (6)删除\nrm test.txt\rgit rm test.txt\r git远程 (1)创建远程\nssh-keygen -t rsa -C \u0026quot;YOUR_EMAIL\u0026quot;\rgit config --global user.name \u0026quot;YOUR_NAME\u0026quot;\rgit config --global user.email \u0026quot;YOUR_EMAIL\u0026quot;\r (2)推送至github\ngit remote add origin git@github.com:xxx/xxx.git  (3)第一次推送\ngit push -u origin master  (4)后续推送\ngit push origin master\r (5)克隆\ngit clone git@github.com:xxx/xxx.git\r (6)拉取远程代码\n# 取回远程主机某个分支的更新，再与本地的指定分支合并\rgit pull \u0026lt;远程主机名\u0026gt; \u0026lt;远程分支名\u0026gt;:\u0026lt;本地分支名\u0026gt;\r (7)删除git项目所有提交历史\n# 创建新分支\rgit checkout --orphan latest_branch\r# 添加所有文件\rgit add .\r# commit代码\rgit commit -m YOUR_COMMENT\r# 删除原来的master分支\rgit branch -D master\r# 重命名为master\rgit branch -m master\r# 推送到远程仓库\rgit push -f origin master\r (8).git垃圾回收\nGit仓库越来越臃肿，大多数版本控制系统存储的是一组初始文件，以及每个文件随着时间的演进而逐步积累起来的差异；\n而Git则会把文件的每一个差异化版本都记录在案。这意味着，即使你只改动了某个文件的一行内容，Git也会生成一个全新的对象来存储新的文件内容。 对象碎片：如果你改动了一个很大的文件，git会为这个文件生成了一个很大的Blob对象\ncd .git\rdu -ah # 查看文件大小\rgit gc --prune=now # 垃圾回收\r 实际上，并不需要手动调用 gc 命令。每当碎片对象过多，或者你向远端服务器发起推送的时候，git 就会自动执行一次打包过程。 (9)git更改远程库\n# 查询当前远程库\rgit remote -v\r# 更改远程库\rgit remote origin set-url \u0026lt;仓库地址\u0026gt;\r submodule # 添加子仓库\rgit submodule add \u0026lt;仓库地址\u0026gt; \u0026lt;本地路径\u0026gt;\r# 检出子仓库\rgit submodule init # 初始化本地配置文件\rgit submodule update # 检出父仓库列出的commit ## 或者\rgit submodule update --init --recursive\r# 递归克隆\rgit clone \u0026lt;仓库地址\u0026gt; --recursive\r More \rgit教程\n","date":1571211021,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587972621,"objectID":"4b21d5dcf3e4ccbf5460b69b359a5446","permalink":"http://lucas-wye.github.io/post/git/","publishdate":"2019-10-16T15:30:21+08:00","relpermalink":"/post/git/","section":"post","summary":"Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目","tags":[],"title":"Git","type":"post"},{"authors":[],"categories":[],"content":" Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和Unix的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的Unix工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。  Control Key [CTRL]U cancel line\r[CTRL]C cancel operation\r[CTRL]S pause display\r[CTRL]Q restart display\r[CTRL]A 光标移到行首\r[CTRL]E 光标移到行末\r[CTRL]K 清除至当前行尾\r[CTRL]V treat following control character as normal character\r[Option]方向键 以单词为单位移动\r User sudo adduser USERNAME # 添加root权限\rsudo usermod -g sudo USERNAME # change password\rpasswd\r# delete user\rsudo userdel -r USERNAME\r Infomation who\rwho am i\rwhoami\renv\ralias\rman\r File Maintenance # r = 4, w = 2, x = 1\rchmod\rumask # set in startup files for the account to masks out permissions, umask numbers added to desired permission number equals 7.\rchgrp # change the group of the file\rchown # change the owner of a file # 查看当前目录文件大小\r# (1)列出当前目录下每个文件的大小，同时也会给出当前目录下所有文件大小总和\rls -lht\r# (2)列出当前文件夹下所有文件对应的大小\rdu -sh PATH\r# 删除文件中的空行\rcat YOUR_FILE | sed -e '/^$/d'\r# conditions\r-r return true (1) if it exists and is readable, otherwise return false (0)\r-w true if it exists and is writable\r-x true if it exists and is executable\r-f true if it exists and is a regular file (or for csh, exists and is not a directory)\r-d true if it exists and is a directory\r-e true if the file exists\r-o true if the user owns the file\r-z true if the file has zero length (empty)\r# 对Exfat文件系统支持\rsudo apt install exfat-utils\r# 打包\rtar -cvf YOUR_FILE.tar YOUR_FILE # 仅打包 tar -zcvf YOUR_FILE.tar.gz YOUR_FILE # gzip压缩\rtar -jcvf YOUR_FILE.tar.bz2 YOUR_FILE # bzip2压缩\r# 查看文件\rtar -tvf YOUR_FILE.tar\rtar -ztvf YOUR_FILE.tar.gz\rtar -jtvf YOUR_FILE.tar.bz2\r# 解包\rtar -xvf YOUR_FILE.tar\rtar -zxvf YOUR_FILE.tar.gz\rtar -jxvf YOUR_FILE.tar.bz2\r find and search # 查找24小时内修改过的文件\rfind ./ -mtime 0 # 查找当前目录及子目录中的.c文件\rfind . -name \u0026quot;*.c\u0026quot;\r# 查找当前目录符合条件的文件内容\rgrep -nHR \u0026quot;STRING\u0026quot; .\r process ps\rps -ef\rkill -9 PID\r Bash executes order # login shell executes order: /etc/profile\r~/.bash/_profile\r~/.bash_login\r~/.profile\r# non-login shell executes: /etc/bashrc\r~/.bashrc\r History history\r!598 # 执行第598条命令\rsudo !! # 以root执行上一条命令\rhistory | awk '{a[$2]++}END{for(i in a){print a[i] \u0026quot; \u0026quot; i}}' | sort -rn | head # 统计情况\r CPU # 总核数 = 物理CPU个数 x 每颗物理CPU的核数 # 总逻辑CPU数 = 物理CPU个数 x 每颗物理CPU的核数 x 超线程数\r# 物理CPU个数\rcat /proc/cpuinfo| grep \u0026quot;physical id\u0026quot;| sort| uniq| wc -l\r# 每个物理CPU中core的个数(即核数)\rcat /proc/cpuinfo| grep \u0026quot;cpu cores\u0026quot;| uniq\r# 逻辑CPU的个数\rcat /proc/cpuinfo| grep \u0026quot;processor\u0026quot;| wc -l\r# CPU型号\rcat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c\r# CPU的负载，返回1、5、15分钟内的负载情况\ruptime  内存 cat /proc/meminfo\rfree\r 磁盘 # 硬盘信息\rfdisk -l # 查看磁盘IO的性能\riostat -x 10\r# 挂载硬盘到某个文件夹\rsudo mount /dev/sda YOUR_PATH # 查看硬盘挂载信息\rdf -h\r# 取消挂载\rsudo umount YOUR_PATH  删除ppa源 cd /etc/apt/sources.list.d/ # 找到关于源的文件,删除即可\r 查看中文字体 fc-list:lang=zh-cn\r I/O Redirection and Piping # stdin: 0, stdout: 1, stderr: 2\r| 管道\r\u0026gt; stdout重定向到file\r\u0026gt;\u0026gt; stdout重定向到file(不覆盖)\r\u0026lt; stdin从file重定向\rtee 复制stdout\r\u0026gt;/dev/null 直接扔掉stdout\r1\u0026gt;FILE_1 2\u0026gt;FILE_2 stdout to FILE_1, stderr to FILE_2\r\u0026gt;FILE 2\u0026gt;\u0026amp;1 redirect stdout and stderr to FILE 2\u0026gt;\u0026amp;1 | tee 将stderr和stdout输出到文件的同时在屏幕上输出\r 开机进入命令行 sudo systemctl set-default multi.user # 进入命令行\rsudo systemctl set-default graph... # 进入图形界面\r Ubuntu设置窗口键在左侧 gsettings set org.gnome.desktop.wm.preferences button-layout 'close,minimize,maximize:'\r 生成强密码 openssl rand -base64 NUMBER\r terminal output to clip  Windows: clip MacOS: pbcopy, pbpaste Linux: xsel  More \rA good introduction to Linux\n","date":1571210362,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587971962,"objectID":"54ce59e82bed1ddb5d9b00e20a4cd5da","permalink":"http://lucas-wye.github.io/post/linux/","publishdate":"2019-10-16T15:19:22+08:00","relpermalink":"/post/linux/","section":"post","summary":"inux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和Unix的多用户、多任务、支持多线程和多CPU的操作系统","tags":[],"title":"Linux","type":"post"},{"authors":[],"categories":[],"content":" OpenMP是由OpenMP Architecture Review Board牵头提出的，并已被广泛接受的，用于共享内存并行系统的多线程程序设计的一套编译指令 (Compiler Directive)。  Introduction See detail at wiki.\nOpenMP Programming Example Here is a C program using OpenMP.\n#include\u0026lt;stdio.h\u0026gt;\r#include\u0026lt;omp.h\u0026gt;\rint main(void) {\rconst int n = 10;\rint arr[n];\r#pragma omp parallel for for(int i = 0;i \u0026lt; n;i++) {\rarr[i] = i;\rprintf(\u0026quot;%d\\n\u0026quot;,i);\r}\rfor(int j = 0;j \u0026lt; n;j++){\rprintf(\u0026quot;%d\\n\u0026quot;,arr[j]);\r}\rreturn 0; }\r More Example \rOpenMP并行开发（C++） \nOpenMP并行程序设计（二）\n","date":1570172605,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587971005,"objectID":"440068f2cb104be6f0321c1ec854ab6d","permalink":"http://lucas-wye.github.io/post/openmp/","publishdate":"2019-10-04T15:03:25+08:00","relpermalink":"/post/openmp/","section":"post","summary":"OpenMP是由OpenMP Architecture Review Board牵头提出的，并已被广泛接受的，用于共享内存并行系统的多线程程序设计的一套编译指令 (Compiler Directive)","tags":[],"title":"OpenMP","type":"post"}]